name: Build and Release Desktop

# 🎯 触发条件：只在推送版本标签时触发
on:
  push:
    tags:
      - 'v*.*.*'           # 匹配 v2.7.0, v3.0.0 等正式版本
      - 'v*.*.*-beta.*'    # 匹配 v2.7.0-beta.1 等测试版本
      - 'v*.*.*-alpha.*'   # 匹配 v2.7.0-alpha.1 等内测版本

  # 🛠️ 可选：手动触发（用于测试工作流）
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: v2.7.0)'
        required: true
        type: string

# 确保同一时间只运行一个构建任务
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

# 🔐 权限声明：允许创建 Release 和上传文件
permissions:
  contents: write  # 允许创建 Release 和上传资产

jobs:
  # ========================
  # 创建 GitHub Release
  # ========================
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
      - name: 获取版本号
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: 检出代码
        uses: actions/checkout@v4

      - name: 生成 Release Notes
        id: release_notes
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          
          # 判断是否为预发布版本
          if [[ $VERSION == *"beta"* ]] || [[ $VERSION == *"alpha"* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
            TITLE="🧪 HexoHub $VERSION (测试版)"
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
            TITLE="🚀 HexoHub $VERSION"
          fi
          
          echo "title=$TITLE" >> $GITHUB_OUTPUT
          
          # 生成 Release Notes
          cat > release_notes.md << 'EOF'
          ## 📦 安装包
          
          - **Windows**: `HexoHub-Setup-${VERSION}.exe`
          - **Linux**: `HexoHub-${VERSION}.AppImage`
          
          ## 📝 更新内容
          
          请查看下方的提交记录。
          
          ---
          
          **注意**：Windows 首次运行可能提示 SmartScreen 警告，点击"更多信息" → "仍要运行"即可。
          EOF

      - name: 创建 GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: ${{ steps.release_notes.outputs.title }}
          body_path: release_notes.md
          draft: true  # 🔑 先创建草稿，确认无误后再发布
          prerelease: ${{ steps.release_notes.outputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ========================
  # Windows 构建
  # ========================
  build-windows:
    name: Build Windows
    needs: create-release
    runs-on: windows-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 配置 Electron 缓存
        run: |
          echo "ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder" >> $env:GITHUB_ENV

      - name: 安装依赖
        run: npm ci

      - name: 构建桌面版
        run: npm run build

      - name: 打包并上传 Windows 应用
        run: npm run make -- --win --publish always
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 上传构建产物（调试用）
        uses: actions/upload-artifact@v4
        if: failure()  # 只在失败时上传，用于调试
        with:
          name: windows-build-logs
          path: |
            dist/
            *.log

  # ========================
  # Linux 构建
  # ========================
  build-linux:
    name: Build Linux
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 配置 Electron 缓存
        run: |
          echo "ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder" >> $GITHUB_ENV

      - name: 安装依赖
        run: npm ci

      - name: 构建桌面版
        run: npm run build

      - name: 打包并上传 Linux 应用
        run: npm run make -- --linux --publish always
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 上传构建产物（调试用）
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: linux-build-logs
          path: |
            dist/
            *.log

